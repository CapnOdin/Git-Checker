;#Warn All, Off
#persistent
#SingleInstance Force

TraySetIcon("resources\github.ico")

#Include <Yaml>

guititle := "Git Checker"

threads := []
projects := Map()

MyGui := GuiCreate("+ReSize", guititle)
MyGui.OnEvent("Close", "GuiClose")
MyGui.OnEvent("Size", "GuiSize")

MyGui.MarginX := 5, MyGui.MarginY := 5
MyGui.SetFont("s11")

dist := 5

cTv := MyGui.Add("TreeView", "Section xs w290 h280")
cTv.Move("x" MyGui.MarginX " y" MyGui.MarginY " w290")
cTv.OnEvent("DoubleClick", (*) => DoubleClicked())
cTv.OnEvent("ContextMenu", (*) => RightClicked())

cBtCheck := MyGui.Add("Button", "xs w290 h25", "Recheck")
cBtCheck.Move("x" MyGui.MarginX " w" cTv.Pos.w)
cBtCheck.OnEvent("Click", (*) => CheckAll())

ImageListID := IL_Create(10)  ; Create an ImageList with initial capacity for 10 icons.
IL_Add(ImageListID, "resources\non.ico")
IL_Add(ImageListID, "resources\good.ico")
IL_Add(ImageListID, "resources\leastbad.ico")
IL_Add(ImageListID, "resources\lessbad.ico")
IL_Add(ImageListID, "resources\bad.ico")
IL_Add(ImageListID, "resources\line.ico")

cTv.SetImageList(ImageListID)

numOfRows := Populate()

MyGui.Show("Hide")

TVM_GETITEMHEIGHT := 0x111C

rowHeight := SendMessage(TVM_GETITEMHEIGHT, 0, 0, cTv.Hwnd)

MonitorGetWorkArea(MonitorGetPrimary(), Left, Top, Right, Bottom)

titlebarHeight := SysGet(SM_CYSIZE := 31)

screenHeight := Bottom - Top
treeViewNeedeHeight := Integer(numOfRows) * Integer(rowHeight)
neededHeight := treeViewNeedeHeight + titlebarHeight + cBtCheck.Pos.h + MyGui.MarginY * 2
h := Min(neededHeight, screenHeight)

MyGui.Show("x" (Right - Left) - MyGui.Pos.w " y0 h" h)

CheckAll()

SetTimer(Func("CheckAll"), 60 * 1000)
return

GitStatus(project, reset := False) {
	return RunWaitMany("git -C `"" project.path "`" status -s") != ""
}

GitCheckIfPushed(project) {
	return RunWaitMany("git -C `"" project.path "`" log --branches --not --remotes") != ""
}

GitCheckForModified(project) {
	return RunWaitMany("git -C `"" project.path "`" diff --name-only") != ""
}

GitCheckForUntracked(project) {
	return RunWaitMany("git -C `"" project.path "`" ls-files --others --exclude-standard") != ""
}

CheckStatus(project, counter := -1, reset := False) {
	Global cTv
	if(DirExist(project.path "\.git")) {
		CoordMode("ToolTip", "Screen")
		;ToolTip("Checking Status: " counter " - " project.name, 0, 0)
		cTv.Modify(project.tvId, "+Icon1")
		;ToolTip("Checking changes: " counter " - " project.name, 0, 0)
		changes := GitStatus(project, reset)
		;ToolTip("Checking commits: " counter " - " project.name, 0, 0)
		commits := GitCheckIfPushed(project)
		;ToolTip("Checking modified: " counter " - " project.name, 0, 0)
		modified := GitCheckForModified(project)
		;ToolTip("Checking untracked: " counter " - " project.name, 0, 0)
		untracked := GitCheckForUntracked(project)
		if(!changes && !commits && !modified && !untracked) {
			cTv.Modify(project.tvId, "+Icon2")
		} else if(!modified && !commits && untracked) {
			cTv.Modify(project.tvId, "+Icon3")
		} else if(!modified && commits) {
			cTv.Modify(project.tvId, "+Icon4")
		} else {
			cTv.Modify(project.tvId, "+Icon5")
		}
		ToolTip()
	}
}

CheckAll() {
	Global projects
	static counter := 1
	reset := Mod(counter, 29) == 0
	for i, project in projects {
		CheckStatus(project, counter, reset)
		reset := False
	}
	counter++
}

AddProject(path, parent) {
	Global cTv, projects
	project := ProjectClass.new(path)
	name := project.name
	if(projects.Has(project.name)) {
		while(projects.Has(name := project.name " (" A_Index ")")) {
			
		}
	}
	projects[name] := project
	project.tvId := cTv.Add(project.name, parent, "Vis")
}

AddCategory(category, projects, patentID := 0) {
	Global cTv
	parent := cTv.Add(category, patentID, "Icon6")
	
	rows := 1
	
	if(Type(projects) = "Array") {
		for i, path in projects {
			if(IsObject(path)) {
				rows += AddCategory(i, path, parent)
			} else {
				AddProject(path, parent)
				rows++
			}
		}
	} else if(Type(projects) = "Object") {
		for name, child in projects.OwnProps() {
			if(IsObject(child)) {
				rows += AddCategory(name, child, parent)
			} else {
				AddProject(path, parent)
				rows++
			}
		}
	}
	return rows
}

Populate() {
	
	projects := Yaml(FileOpen("projects.json", "r`n").Read())[1]
	
	rows := 0
	
	for category, paths in projects.OwnProps() {
		rows += AddCategory(category, paths)
		
		/*
		parrent := cTv.Add(category)
		for i, path in paths {
			if(IsObject(path)) {
				
			}
			AddProject(path, parrent)
		}
		*/
	}
	
	;for i, path in StrSplit(FileOpen("projects.csv", "r`n").Read(), "`n") {
	;	AddProject(path)
	;}'
	return rows
}

OpenTerminal(project) {
	Run("powershell -NoExit -Command `"& {cd \`"" project.path "\`"`n git status}`"")
}

DoubleClicked() {
	Global cTv, projects
	try {
		SelectedItemID := cTv.GetSelection()
		name := cTv.GetText(SelectedItemID)
		OpenTerminal(projects[name])
		CheckStatus(projects[name])
	}
}

RightClicked() {
	Global cTv, projects
	try {
		Click()
		Sleep(50)
		SelectedItemID := cTv.GetSelection()
		name := cTv.GetText(SelectedItemID)
		Run(projects[name].path)
	}
}

RunWaitMany(commands, timeout := 10000, reset := False) {
	static shell := ComObjCreate("WScript.Shell"), exec := shell.Exec(A_ComSpec " /q /k echo off"), _ := WinWaitHide(exec.ProcessID)
	; Open cmd.exe with echoing of commands disabled

	if(reset) {
		WinClose("ahk_pid " exec.ProcessID)
		shell := ComObjCreate("WScript.Shell")
		exec := shell.Exec(A_ComSpec " /q /k echo off")
		WinWaitHide(exec.ProcessID)
	}

	start := A_TickCount

	; Send the commands to execute, separated by newline
	exec.StdIn.WriteLine("cls`n" commands "`necho ")
	
	; Read and return the output of all commands
	output := ""
	
	loop {
		if(exec.StdOut.AtEndOfStream) {
			if(A_TickCount - start > timeout) {
				Throw {"what": A_ThisFunc " timedout after " (A_TickCount - start) " while running (" commands ")", "file": A_LineFile, "line": A_LineNumber}
			}
			Sleep(25)
		} else {
			while(!exec.StdOut.AtEndOfStream) {
				char := exec.StdOut.Read(1)
				if(char = "") {
					break 2
				}
				output .= char
			}
		}
	}
	
	output := StrReplace(StrReplace(output, ""), "`r")
	output := RegExReplace(output, "m)^$`n")
	if(SubStr(output, -1) = "`n") {
		output := SubStr(output, 1, -1)
	}
	return output
	;return exec.StdOut.ReadAll()
}

WinWaitHide(pID) {
	WinWait("ahk_pid " pID)
	WinHide("ahk_pid " pID)
}

ClearControl(control) {
	control.Text := ""
}

GuiSize(GuiObj, MinMax, Width, Height) {
	Global cTv, cBtCheck, dist
	cBtCheck.Move("w" Width - 2 * GuiObj.MarginX " y" Height - cBtCheck.Pos.h - GuiObj.MarginY)
	cTv.Move("w" Width - 2 * GuiObj.MarginX " h" cBtCheck.Pos.y - cTv.Pos.y - dist)
}

GuiClose(*) {
	ExitApp
}

Join(sep, params*) {
    for index,param in params
        str .= param . sep
    return SubStr(str, 1, -StrLen(sep))
}

Class ProjectClass {
	tvobj := ""

	__New(path) {
		this.path := path
		this.name := this.GetName()
	}
	
	GetName() {
		SplitPath(this.path, name)
		return name
	}
}
